version: "3.5"
services:
  traefik:
    image: traefik:2.4
    container_name: traefik
    restart: always
    ports:
      - "443:443"
    volumes:
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - traefikdata:/tmp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.routers.dashboard.entryPoints=secure"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$w50rv36m$$KnmSsYFxJKy6oAVaNbOn/."
      - "traefik.http.routers.dashboard.tls=true"
    networks:
      - reverse_proxy
      - sirp

  elasticsearch:
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.12.0'
    container_name: elasticsearch
    hostname: elasticsearch
    restart: always
    environment:
      - http.host=0.0.0.0
      - discovery.type=single-node
      - cluster.name=sirp
      - script.allowed_types= inline
      - thread_pool.search.queue_size=100000
      - thread_pool.write.queue_size=10000
      - gateway.recover_after_nodes=1
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - esdata:/usr/share/elasticsearch/data
      - eslogs:/usr/share/elasticsearch/logs
    networks:
      - sirp
      
  logstash:
    image: 'docker.elastic.co/logstash/logstash:7.12.0'
    container_name: logstash
    hostname: logstash
    restart: always
    volumes:
      - stoq:/var/log/stoq:ro
      - ./logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/config/jvm.options:/usr/share/logstash/config/jvm.options:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - sirp
    ports:
      - "5044:5044"
      
  kibana:
    image: 'docker.elastic.co/kibana/kibana:7.12.0'
    container_name: kibana
    hostname: kibana
    restart: always
    depends_on:
      - elasticsearch
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=PathPrefix(`/kibana`)"
      - "traefik.http.routers.kibana.entryPoints=secure"
      - "traefik.http.routers.kibana.tls=true"
    networks:
      - sirp

  auditbeat:
    image: 'docker.elastic.co/beats/auditbeat:7.12.0'
    container_name: auditbeat
    hostname: auditbeat
    restart: always
    user: root
    cap_add: 
      - AUDIT_CONTROL
      - AUDIT_READ
    privileged: true
    pid: host
    depends_on:
      - elasticsearch
    volumes:
      - ./auditbeat/auditbeat.yml:/usr/share/auditbeat/auditbeat.yml:ro
    networks:
      - sirp

  metricbeat:
    image: 'docker.elastic.co/beats/metricbeat:7.12.0'
    container_name: metricbeat
    restart: always
    depends_on:
      - elasticsearch
    hostname: ${HOSTNAME}
    command: ["-system.hostfs=/hostfs", "-e"]
    user: root
    networks:
      - sirp
    volumes:
      - ./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - ./metricbeat/modules.d/docker.yml:/usr/share/metricbeat/modules.d/docker.yml:ro
      - ./metricbeat/modules.d/redis.yml:/usr/share/metricbeat/modules.d/redis.yml:ro
      - ./metricbeat/modules.d/rabbitmq.yml:/usr/share/metricbeat/modules.d/rabbitmq.yml:ro
      - ./metricbeat/modules.d/elasticsearch-xpack.yml:/usr/share/metricbeat/modules.d/elasticsearch-xpack.yml:ro
      - ./metricbeat/modules.d/kibana-xpack.yml:/usr/share/metricbeat/modules.d/kibana-xpack.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro


  filebeat:
    image: 'docker.elastic.co/beats/filebeat:7.12.0'
    container_name: filebeat
    hostname: filebeat
    restart: always
    depends_on:
      - elasticsearch
    volumes:
      - /var/log:/var/log
      - suricatadata:/var/log/suricata:ro
      - traefikdata:/var/log/traefik:ro
      - zeekdata:/var/log/bro/current:ro
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./filebeat/modules.d/system.yml:/usr/share/filebeat/modules.d/system.yml:ro
      - ./filebeat/modules.d/suricata.yml:/usr/share/filebeat/modules.d/suricata.yml:ro
      - ./filebeat/modules.d/threatintel.yml:/usr/share/filebeat/modules.d/threatintel.yml:ro
      - ./filebeat/modules.d/traefik.yml:/usr/share/filebeat/modules.d/traefik.yml:ro
      - ./filebeat/modules.d/zeek.yml:/usr/share/filebeat/modules.d/zeek.yml:ro
    networks:
      - sirp

  suricata:
    image: jasonish/suricata:5.0
    command: -c /etc/suricata/suricata.yaml -i ens32
    container_name: suricata
    hostname: suricata
    network_mode: "host"
    privileged: true
    user: root
    cap_add:
      - NET_RAW
      - NET_ADMIN
      - SYS_NICE
    restart: always
    volumes:
      - ./suricata/rules:/etc/suricata/rules
      - ./suricata/suricata.yaml:/etc/suricata/suricata.yaml
      - ./suricata/threshold.config:/etc/suricata/threshold.config
      - suricatadata:/var/log/suricata
  
  stoq:
    image: v1d1an/stoq:3.0.1
    command: run -s yara
    container_name: stoq
    user: root
    restart: always
    volumes:
      - ./stoq/rules:/rules:ro
      - ./stoq/stoq.cfg:/home/stoq/.stoq/stoq.cfg:ro
      - stoq:/home/stoq/tmp/
      - suricatadata:/files:ro

  
  zeek:
    image: blacktop/zeek:elastic-3.2.3
    container_name: zeek
    hostname: zeek
    network_mode: "host"
    privileged: true
    cap_add:
      - NET_RAW
      - NET_ADMIN
      - SYS_NICE
    restart: always
    command: -C -i af_packet::ens32 local
    volumes:
      - zeekdata:/pcap

  cortex:
    image: 'v1d1an/cortex:3.1.1-2'
    container_name: cortex
    hostname: cortex
    restart: always
    volumes:
      - ./cortex/application.conf:/etc/cortex/application.conf:ro
    depends_on:
      - elasticsearch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cortex.rule=PathPrefix(`/cortex`)"
      - "traefik.http.routers.cortex.entryPoints=secure"
      - "traefik.http.routers.cortex.tls=true"
    networks:
      - sirp

  cassandra:
    image: cassandra:3.11
    container_name: cassandra
    hostname: cassandra
    restart: always
    hostname: cassandra
    environment:
      - MAX_HEAP_SIZE=1G
      - HEAP_NEWSIZE=1G
      - CASSANDRA_CLUSTER_NAME=thp
    volumes:
      - cassandra:/var/lib/cassandra/data
    networks:
      - sirp

  thehive:
    image: 'thehiveproject/thehive4:latest'
    container_name: thehive
    hostname: thehive
    user: root
    restart: always
    depends_on:
      - cassandra
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.thehive.rule=PathPrefix(`/thehive`)"
      - "traefik.http.routers.thehive.entryPoints=secure"
      - "traefik.http.routers.thehive.tls=true"
    volumes:
      - ./thehive/application.conf:/etc/thehive/application.conf:ro
      - thehivedata:/opt/data
      - thehivedata:/opt/index
    command: '--no-config --no-config-secret'
    networks:
      - sirp

  elastalert:
    image: 'jertel/elastalert-docker:latest'
    container_name: elastalert
    hostname: elastalert
    restart: always
    depends_on:
      - elasticsearch
    volumes:
      - ./elastalert/elastalert.yaml:/opt/config/elastalert_config.yaml:ro
      - ./elastalert/rules:/opt/elastalert/rules:ro
    networks:
      - sirp

  redis:
    image: redis:latest
    hostname: redis
    container_name: redis
    restart: always
    volumes:
      - redis:/data
    networks:
      - sirp

  db:
    image: mysql:latest
    container_name: db
    hostname: db
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    cap_add:
      - SYS_NICE
    environment:
      - "MYSQL_USER=misp"
      - "MYSQL_PASSWORD=password"
      - "MYSQL_ROOT_PASSWORD=password"
      - "MYSQL_DATABASE=misp"
    volumes:
      - mysql:/var/lib/mysql
    networks:
      - sirp

  misp:
    image: coolacid/misp-docker:core-latest
    container_name: misp
    hostname: misp.cyber
    restart: always
    depends_on:
      - redis
      - db
    expose:
      - "80"
      - "443"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.misp.rule=PathPrefix(`/misp`)"
      - "traefik.http.routers.misp.entryPoints=secure"
      - "traefik.http.routers.misp.tls=true"
      - "traefik.http.middlewares.misp-stripprefix.stripprefix.prefixes=/misp"
      - "traefik.http.routers.misp.middlewares=misp-stripprefix"

    environment:
      - "HOSTNAME=https://misp.cyber/misp"
      - "REDIS_FQDN=redis"
      - "INIT=true"             # Initialze MISP, things includes, attempting to import SQL and the Files DIR
      - "CRON_USER_ID=1"        # The MISP user ID to run cron jobs as
      - "NOREDIR=true"
      - "DISIPV6=true" # Disable IPV6 in nginx
      - "MYSQL_HOST=db"
      - "MYSQL_USER=misp"
      - "MYSQL_PASSWORD=password"
      - "MYSQL_DATABASE=misp"
      - "SECURESSL=true" # Enable higher security SSL in nginx
      - "MISP_MODULES_FQDN=http://misp-modules" # Set the MISP Modules FQDN, used for Enrichment_services_url/Import_services_url/Export_services_url
      - "WORKERS=4"

    volumes:
      - "./misp/config.php:/var/www/MISP/app/Config/config.php"
      - "misp:/var/www/MISP/app/tmp/logs/"
      - "misp:/var/www/MISP/app/files"
      - "misp:/etc/nginx/certs"
    networks:
      - sirp

  misp-modules:
    image: coolacid/misp-docker:modules-latest
    container_name: misp-modules
    restart: always
    environment:
      - "REDIS_BACKEND=redis"
    depends_on:
      - redis
      - db
    networks:
      - sirp

  minio:
    image: minio/minio:RELEASE.2021-03-26T00-00-41Z
    container_name: minio
    volumes:
      - minio:/data
    ports:
      - "8889:9000"
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always
    networks:
      - sirp

  rabbitmq:
    image: rabbitmq:3.8-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - amqpdata:/var/lib/rabbitmq
    restart: always
    networks:
      - sirp

  opencti:
    image: opencti/platform:latest
    container_name: opencti
    environment:
      - NODE_OPTIONS=--max-old-space-size=8096
      - APP__PORT=8080
      - APP__ADMIN__EMAIL=${OPENCTI_ADMIN_EMAIL}
      - APP__ADMIN__PASSWORD=${OPENCTI_ADMIN_PASSWORD}
      - APP__ADMIN__TOKEN=${OPENCTI_ADMIN_TOKEN}
      - APP__LOGS_LEVEL=error
      - APP__LOGS=./logs
      - APP__REACTIVE=true
      - APP__BASE_PATH=/opencti
      - REDIS__HOSTNAME=redis
      - REDIS__PORT=6379
      - ELASTICSEARCH__URL=http://elastic:elastic_opencti@elasticsearch:9200
      - MINIO__ENDPOINT=minio
      - MINIO__PORT=9000
      - MINIO__USE_SSL=false
      - MINIO__ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO__SECRET_KEY=${MINIO_SECRET_KEY}
      - RABBITMQ__HOSTNAME=rabbitmq
      - RABBITMQ__PORT=5672
      - RABBITMQ__PORT_MANAGEMENT=15672
      - RABBITMQ__MANAGEMENT_SSL=false
      - RABBITMQ__USERNAME=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ__PASSWORD=${RABBITMQ_DEFAULT_PASS}
      - PROVIDERS__LOCAL__STRATEGY=LocalStrategy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.opencti.rule=PathPrefix(`/opencti`)"
      - "traefik.http.routers.opencti.entryPoints=secure"
      - "traefik.http.routers.opencti.tls=true"
    expose:
      - "8080"
    depends_on:
      - redis
      - elasticsearch
      - minio
      - rabbitmq
    restart: always
    networks:
      - sirp

  worker:
    image: opencti/worker:latest
    environment:
      - OPENCTI_URL=http://opencti:8080/opencti
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - WORKER_LOG_LEVEL=info
    depends_on:
      - opencti
    restart: always
    networks:
      - sirp

  connector-history:
    image: opencti/connector-history:latest
    environment:
      - OPENCTI_URL=http://opencti:8080/opencti
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - CONNECTOR_ID=${CONNECTOR_HISTORY_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=STREAM
      - CONNECTOR_NAME=History
      - CONNECTOR_SCOPE=history
      - CONNECTOR_CONFIDENCE_LEVEL=3
      - CONNECTOR_LOG_LEVEL=info
    restart: always
    networks:
      - sirp

  connector-export-file-stix:
    image: opencti/connector-export-file-stix:latest
    environment:
      - OPENCTI_URL=http://opencti:8080/opencti
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - CONNECTOR_ID=${CONNECTOR_EXPORT_FILE_STIX_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_EXPORT_FILE
      - CONNECTOR_NAME=ExportFileStix2
      - CONNECTOR_SCOPE=application/json
      - CONNECTOR_CONFIDENCE_LEVEL=3
      - CONNECTOR_LOG_LEVEL=info
    restart: always
    networks:
      - sirp

  connector-export-file-csv:
    image: opencti/connector-export-file-csv:latest
    environment:
      - OPENCTI_URL=http://opencti:8080/opencti
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - CONNECTOR_ID=${CONNECTOR_EXPORT_FILE_CSV_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_EXPORT_FILE
      - CONNECTOR_NAME=ExportFileCsv
      - CONNECTOR_SCOPE=text/csv
      - CONNECTOR_CONFIDENCE_LEVEL=3
      - CONNECTOR_LOG_LEVEL=info
    restart: always
    networks:
      - sirp

  connector-import-file-stix:
    image: opencti/connector-import-file-stix:latest
    environment:
      - OPENCTI_URL=http://opencti:8080/opencti
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - CONNECTOR_ID=${CONNECTOR_IMPORT_FILE_STIX_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_IMPORT_FILE
      - CONNECTOR_NAME=ImportFileStix
      - CONNECTOR_SCOPE=application/json,text/xml
      - CONNECTOR_CONFIDENCE_LEVEL=3
      - CONNECTOR_LOG_LEVEL=info
    restart: always
    networks:
      - sirp

  connector-import-file-pdf-observables:
    image: opencti/connector-import-file-pdf-observables:latest
    environment:
      - OPENCTI_URL=http://opencti:8080/opencti
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - CONNECTOR_ID=${CONNECTOR_IMPORT_FILE_PDF_OBSERVABLES_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_IMPORT_FILE
      - CONNECTOR_NAME=ImportFilePdfObservables
      - CONNECTOR_SCOPE=application/pdf
      - CONNECTOR_CONFIDENCE_LEVEL=3
      - CONNECTOR_LOG_LEVEL=info
      - PDF_OBSERVABLES_CREATE_INDICATOR=False
    restart: always
    networks:
      - sirp

  connector-misp:
    image: opencti/connector-misp:latest
    environment:
      - OPENCTI_URL=http://opencti:8080/opencti
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - CONNECTOR_ID=${CONNECTOR_MISP_ID}
      - CONNECTOR_TYPE=EXTERNAL_IMPORT
      - CONNECTOR_NAME=MISP
      - CONNECTOR_SCOPE=misp
      - CONNECTOR_CONFIDENCE_LEVEL=3
      - CONNECTOR_UPDATE_EXISTING_DATA=false
      - CONNECTOR_LOG_LEVEL=info
      - MISP_URL=http://misp/misp # Required
      - MISP_KEY=misp_api_key # Required
      - MISP_SSL_VERIFY=False # Required
      - MISP_INTERVAL=10 # Required, in minutes
      - MISP_DATETIME_ATTRIBUTE=timestamp # Required, filter to be used in query for new MISP events
      - MISP_CREATE_REPORTS=True # Required, create report for MISP event
      - MISP_CREATE_INDICATORS=True # Required, create indicators from attributes
      - MISP_CREATE_OBSERVABLES=True # Required, create observables from attributes
      - MISP_REPORT_CLASS=MISP Event # Optional, report_class if creating report for event
      - MISP_IMPORT_FROM_DATE=2000-01-01 # Optional, import all event from this date
      - MISP_IMPORT_DISTRIBUTION_LEVELS=0,1,2,3 # Optional, only import events with the given distribution levels
      - MISP_IMPORT_THREAT_LEVELS=1,2,3,4 # Optional only import events with the given threat levels
      - MISP_IMPORT_ONLY_PUBLISHED=True
    restart: always
    networks:
      - sirp

  connector-mitre:
    image: opencti/connector-mitre:latest
    environment:
      - OPENCTI_URL=http://opencti:8080/opencti
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - CONNECTOR_ID=${CONNECTOR_MITRE_ID}
      - CONNECTOR_TYPE=EXTERNAL_IMPORT
      - CONNECTOR_NAME=MITRE ATT&CK
      - CONNECTOR_SCOPE=identity,attack-pattern,course-of-action,intrusion-set,malware,tool,report,external-reference-as-report
      - CONNECTOR_CONFIDENCE_LEVEL=15 # From 0 (Unknown) to 100 (Fully trusted)
      - CONNECTOR_UPDATE_EXISTING_DATA=true
      - CONNECTOR_LOG_LEVEL=info
      - MITRE_ENTERPRISE_FILE_URL=https://raw.githubusercontent.com/mitre/cti/master/enterprise-attack/enterprise-attack.json
      - MITRE_PRE_ATTACK_FILE_URL=https://raw.githubusercontent.com/mitre/cti/master/pre-attack/pre-attack.json
      - MITRE_MOBILE_ATTACK_FILE_URL=https://raw.githubusercontent.com/mitre/cti/master/mobile-attack/mobile-attack.json
      - MITRE_INTERVAL=7 # In days, must be strictly greater than 1
    restart: always
    networks:
      - sirp


networks:
   reverse_proxy:
    driver: bridge
   sirp:
    driver: bridge
volumes:
   esdata:
    external: false
   eslogs:
    external: false
   zeekdata:
    external: false
   suricatadata:
    external: false
   amqpdata:
    external: false
   redis:
    external: false
   thehivedata:
    external: false
   cassandra: 
    external: false
   minio:
    external: false
   traefikdata:
    external: false
   mysql:
    external: false
   misp:
    external: false
   stoq:
    external: false